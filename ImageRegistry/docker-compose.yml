version: '3.5'

services:
  ca:
    image: cfssl/cfssl:1.5.0
    hostname: ca
    domainname: cfssl
    restart: ${RESTART_POLICY}
    container_name: ca
    volumes:
      - type: bind
        source: ./mountPoints/ca
        target: /ca
    healthcheck:
      test: curl --fail http://localhost:8888/api/v1/cfssl/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 10s
    env_file: ca.env
    entrypoint: ["cfssl", "serve", "-ca", "/ca/docker.crt", "-ca-key", "/ca/docker.key", "-ca-bundle", "/ca/ca-bundle.crt", "-address", "0.0.0.0", "-loglevel", "0"] #, "-config", "/ca/config.json"]
  certgetter:
    depends_on:
      - ca
    env_file: ca.env
    build:
      context: ./src/ca
      dockerfile: Dockerfile
    restart: ${RESTART_POLICY}
    volumes:
      - registry_certs:/mnt/registry_certs:rw
      - grafana_certs:/mnt/grafana_certs:rw
      - ca_certs:/mnt/ca_certs:rw
      - registryui_certs:/mnt/registryui_certs:rw
      - registry_mirror_certs:/mnt/registry_mirror_certs:rw
      - squid_certs:/mnt/squid_certs:rw
      - ldap_certs:/mnt/ldap_certs:rw
      - nextcloud_certs:/mnt/nextcloud_certs:rw
      - kibana_certs:/mnt/kibana_certs:rw
      - elastic_certs:/mnt/elastic_certs:rw
      - diagrams_certs:/mnt/diagrams_certs:rw
      - nagios_certs:/mnt/nagios_certs:rw
      - prometheus_certs:/mnt/prometheus_certs:rw
      - prometheusblackbox_certs:/mnt/prometheusblackbox_certs:rw
      - vscode_certs:/mnt/vscode_certs:rw
      - calibre_certs:/mnt/calibre_certs:rw
      - mineos_certs:/mnt/mineos_certs:rw
      - scratch_certs:/mnt/scratch_certs:rw
      - ingress_certs:/mnt/ingress_certs:rw
      - transmission_temp_certs:/mnt/transmission_temp_certs:rw
      - transmission_persist_certs:/mnt/transmission_persist_certs:rw
      - vault_certs:/mnt/vault_certs:rw
      - homer_certs:/mnt/homer_certs:rw
    # Tried real hard to run this script with parameters, specifically the array of PSObjects. I could shell in and run the command below just fine, but could not get it in a place for the entrypoint
    # pwsh -command "& /work/New-CFSSL_Certificate.ps1 -certRequests ([PSCustomObject]@{name = 'registry'; hosts = @('ImageRegistry','localhost','127.0.0.1')},[PSCustomObject]@{name = 'grafana'; hosts = @('grafana','localhost','127.0.0.1')})"
    entrypoint: ["pwsh", "/work/New-CFSSL_Certificate.ps1"]
    healthcheck:
      test: ["CMD", "pwsh", "-c", "Test-Path", "/certs/cert.crt"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 10s
  dns: 
    image: coredns/coredns
    ports:
        - 53:53/udp
        - 5353:5353
        - 5392:9253
    volumes:
      - ./mountPoints/coredns:/root:rw
    command: -conf /root/Corefile
    env_file: ca.env
    restart: ${RESTART_POLICY}
  ingress:
    image: nginx:1.19-alpine
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./mountPoints/ingress/basicAuth:/etc/nginx/basicAuth
      - ./mountPoints/ingress/nginx.conf:/etc/nginx/nginx.conf
      - ca_certs:/etc/nginx/conf.d/ca:ro
      - grafana_certs:/etc/nginx/conf.d/grafana:ro
      - ldap_certs:/etc/nginx/conf.d/ldap:ro
      - nextcloud_certs:/etc/nginx/conf.d/nextcloud:ro
      - kibana_certs:/etc/nginx/conf.d/kibana:ro
      - elastic_certs:/etc/nginx/conf.d/elastic:ro
      - diagrams_certs:/etc/nginx/conf.d/diagrams:ro
      - nagios_certs:/etc/nginx/conf.d/nagios:ro
      - prometheus_certs:/etc/nginx/conf.d/prometheus:ro
      - prometheusblackbox_certs:/etc/nginx/conf.d/prometheusblackbox:ro
      - registryui_certs:/etc/nginx/conf.d/registryui:ro
      - registry_certs:/etc/nginx/conf.d/registry:ro
      - registry_mirror_certs:/etc/nginx/conf.d/registry_mirror:ro
      - vscode_certs:/etc/nginx/conf.d/vscode:ro
      - calibre_certs:/etc/nginx/conf.d/calibre:ro
      - mineos_certs:/etc/nginx/conf.d/mineos:ro
      - scratch_certs:/etc/nginx/conf.d/scratch:ro
      - ingress_certs:/etc/nginx/conf.d/ingress:ro
      - transmission_temp_certs:/etc/nginx/conf.d/transmission_temp:ro
      - transmission_persist_certs:/etc/nginx/conf.d/transmission_persist:ro
      - vault_certs:/etc/nginx/conf.d/vault:ro
      - homer_certs:/etc/nginx/conf.d/homer:ro
    restart: ${RESTART_POLICY}
  ingress_prom_exporter:
    image: nginx/nginx-prometheus-exporter:0.9.0
    command: -nginx.scrape-uri=http://ingress:80/stub_status
    restart: ${RESTART_POLICY}
  vault:
      image: vault
      container_name: vault
      volumes:
        - ./mountPoints/vault/file:/vault/file:rw
        - ./mountPoints/vault/config:/vault/config:rw
      cap_add:
        - IPC_LOCK
      entrypoint: vault server -config=/vault/config/vault.json
      restart: ${RESTART_POLICY}
volumes:
  registry_certs:
  registry_requested_certs:
  registry_auth:
  grafana_data:
  grafana_plugins:
  grafana_provisiong:
  grafana_home:
  grafana_logs:
  grafana_certs:
  squid_cache:
  squid_log:
  squid_certs:
  ca_certs:
  registryui_certs:
  registry_mirror_certs:
  ldap_certs:
  dhcp_leases:
  nextcloud_certs:
  elastic_certs:
  kibana_certs:
  diagrams_certs:
  nagios_certs:
  prometheus_certs:
  prometheusblackbox_certs:
  vscode_certs:
  calibre_certs:
  mineos_certs:
  scratch_certs:
  ingress_certs:  
  transmission_temp_certs:
  transmission_persist_certs:
  vault_certs:
  homer_certs: