# Instructions
#
# Set the following environment variables before running/building:
## [Environment]::SetEnvironmentVariable("DOCKER_REGISTRY", "localhost:5000", "Process")
## [Environment]::SetEnvironmentVariable("DOCKER_REGISTRY_AUTHUSER", "basicAuth", "Process")
## [Environment]::SetEnvironmentVariable("DOCKER_REGISTRY_AUTHPASSWORD", "basicAuth", "Process")
## [Environment]::SetEnvironmentVariable("RESTART_POLICY", "unless-stopped", "Process") # no, on-failure, always,unless-stopped
## [Environment]::SetEnvironmentVariable("HTTP_PROXY", "", "Process")
##
## Check the values with:
## [Environment]::GetEnvironmentVariable("DOCKER_REGISTRY", "Process")
## [Environment]::GetEnvironmentVariable("DOCKER_REGISTRY_AUTHUSER", "Process")
## [Environment]::GetEnvironmentVariable("DOCKER_REGISTRY_AUTHPASSWORD", "Process")
#
# Notes for trying to get the cfssl to work with my intermeadeate CA
# https://web.archive.org/web/20200718025349/https://propellered.com/posts/cfssl_setting_up/
# https://web.archive.org/web/20200718025350/https://propellered.com/posts/cfssl_setting_up_ocsp_api/
version: '3.5'

services:
  ca:
    image: cfssl/cfssl
    hostname: cfssl
    domainname: cfssl
    restart: ${RESTART_POLICY}
    container_name: ca
    volumes:
      - type: bind
        source: ./mountPoints/ca
        target: /ca
    healthcheck:
      test: curl --fail http://localhost:8888/api/v1/cfssl/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 10s
    entrypoint: ["cfssl", "serve", "-ca", "/ca/docker.crt", "-ca-key", "/ca/docker.key", "-ca-bundle", "/ca/ca-bundle.crt", "-address", "0.0.0.0", "-loglevel", "0"] #, "-config", "/ca/config.json"]
  ca_reverseproxy:
    restart: ${RESTART_POLICY}
    build:
      context: src/ca_reverseproxy
      dockerfile: Dockerfile
      args:
        - "basicAuthUsername=${DOCKER_REGISTRY_AUTHUSER}"
        - "basicAuthPassword=${DOCKER_REGISTRY_AUTHPASSWORD}"
        - "ForwardPort=8888"
        - "ForwardHost=ca"
    ports:
      - 80:80
      - 443:443
  certgetter:
    depends_on:
      - ca
    build: ./src/ca
    restart: ${RESTART_POLICY}
    volumes:
      - registry_certs:/mnt/registry_certs
      - grafana_certs:/mnt/grafana_certs
      - squid_certs:/mnt/squid_certs
    # Tried real hard to run this script with parameters, specifically the array of PSObjects. I could shell in and run the command below just fine, but could not get it in a place for the entrypoint
    # pwsh -command "& /work/New-CFSSL_Certificate.ps1 -certRequests ([PSCustomObject]@{name = 'registry'; hosts = @('ImageRegistry','localhost','127.0.0.1')},[PSCustomObject]@{name = 'grafana'; hosts = @('grafana','localhost','127.0.0.1')})"
    entrypoint: ["pwsh", "/work/New-CFSSL_Certificate.ps1"]
    healthcheck:
      test: ["CMD", "pwsh", "-c", "Test-Path", "/certs/cert.crt"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 10s
  registry:
    hostname: registry_app
    restart: ${RESTART_POLICY}
    build:
      context: src/registry
      dockerfile: Dockerfile
      args:
        - "basicAuthUsername=${DOCKER_REGISTRY_AUTHUSER}"
        - "basicAuthPassword=${DOCKER_REGISTRY_AUTHPASSWORD}"
        - "apiPort=5000"
        - "metricsPort=5001"
    env_file: env.conf
    depends_on:
      - certgetter
    ports:
      - "5000:5000"
      - "5001:5001"
    volumes:
      - registry_data:/var/lib/registry
      - registry_certs:/certs
      - registry_auth:/auth
    labels:
      # Adding this label means this container should be stopped while it's being backed up:
      - "docker-volume-backup.stop-during-backup=true"
   # This is a cool image to help take backups of volumes. You can take a manual backup of the running volume by executing:
   # docker-compose exec backup ./backup.sh
   # See https://github.com/futurice/docker-volume-backup for more info
  registry_backup:
    depends_on:
      - registry
    image: futurice/docker-volume-backup
    restart: ${RESTART_POLICY}
    environment:
      BACKUP_CRON_EXPRESSION: "0 20 * * *"
      HTTP_PROXY: $HTTP_PROXY
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Allow use of the "stop-during-backup" feature
      - registry_data:/backup/registry_data:ro    # Mount the registry data volume (as read-only)
      - ./backups/registry:/archive                      # Mount a local folder as the backup archive
  registryui:
    hostname: registry
    depends_on:
      - registry
    build:
      context: src/registryui
      dockerfile: Dockerfile
    restart: ${RESTART_POLICY}
    ports:
      - "8000:8000"
    links:
      - registry:registry
  dns: 
    image: coredns/coredns
    ports:
        - 53:53/udp
        - 5353:5353
        - 5392:9253
    volumes:
      - ./MountPoints/coredns:/root
    command: -conf /root/Corefile
    env_file: .env
    restart: ${RESTART_POLICY}
  grafana:
    image: grafana/grafana:7.1.5
    ports:
      - '3000:3000'
    depends_on:
      - dns
      - registry
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_plugins:/var/lib/grafana/plugins
      - ./MountPoints/grafana/provisioning:/etc/grafana/provisioning
      - ./MountPoints/grafana/grafana.ini:/etc/grafana/grafana.ini
      - grafana_home:/usr/share/grafana
      - grafana_logs:/var/log/grafana
      - grafana_certs:/mnt/certs
    env_file: .env
    restart: ${RESTART_POLICY}
  prometheus:
    depends_on:
      - grafana
    ports:
      - '9090:9090'
    image: prom/prometheus
    volumes:
     - ./MountPoints/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    env_file: .env
    restart: ${RESTART_POLICY}
  squidproxy:
    image: localhost:5000/sameersbn/squid # https://github.com/brandonmcclure/docker-squid?organization=brandonmcclure&organization=brandonmcclure
    restart: ${RESTART_POLICY}
    volumes:
      - squid_cache:/var/spool/squid
      - squid_log:/var/log/squid
      - ./MountPoints/squid:/etc/squid
      - squid_certs:/opt/conf/certs/
    ports:
      - 3128:3128
      - 3180:80
    #entrypoint: tail -f /dev/null
    #command: /usr/sbin/squid -k check
  squidmetrics:
    image: boynux/squid-exporter
    environment:
      SQUID_EXPORTER_LISTEN: ":9301"
      SQUID_HOSTNAME: "proxy.example.com"
    ports:
      - 9301:9301
volumes:
  registry_data:
  registry_certs:
  registry_requested_certs:
  registry_auth:
  grafana_data:
  grafana_plugins:
  grafana_provisiong:
  grafana_home:
  grafana_logs:
  grafana_certs:
  squid_cache:
  squid_log:
  squid_certs: