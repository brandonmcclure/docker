# Instructions
#
# Set the following environment variables before running/building:
  # [Environment]::SetEnvironmentVariable("DOCKER_REGISTRY", "localhost:5000", "Process")
  # [Environment]::SetEnvironmentVariable("DOCKER_REGISTRY_AUTHUSER", "basicAuth", "Process")
  # [Environment]::SetEnvironmentVariable("DOCKER_REGISTRY_AUTHPASSWORD", "basicAuth", "Process")
  #
  # Check the values with:
  # [Environment]::GetEnvironmentVariable("DOCKER_REGISTRY", "Process")
  # [Environment]::GetEnvironmentVariable("DOCKER_REGISTRY_AUTHUSER", "Process")
  # [Environment]::GetEnvironmentVariable("DOCKER_REGISTRY_AUTHPASSWORD", "Process")
#
# Notes for trying to get the cfssl to work with my intermeadeate CA  
# https://web.archive.org/web/20200718025349/https://propellered.com/posts/cfssl_setting_up/
# https://web.archive.org/web/20200718025350/https://propellered.com/posts/cfssl_setting_up_ocsp_api/
version: '3.5'

services:
  ca:
    image: cfssl/cfssl
    hostname: cfssl
    domainname: cfssl
    container_name: ca
    volumes:
      - type: bind
        source: ./mountPoints/ca
        target: /ca
    ports:
      - "8888:8888"
    healthcheck:
      test: curl --fail http://localhost:8888/api/v1/cfssl/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 10s
    entrypoint: ["cfssl","serve","-ca","/ca/docker.crt","-ca-key","/ca/docker.key","-ca-bundle","/ca/ca-bundle.crt","-address","0.0.0.0","-loglevel","0"] # "-config","/ca/config.json",
  certgetter:
    depends_on:
      - ca
    build: ./src/ca
    volumes:
      - registry_certs:/certs
      - type: bind
        source: ./mountPoints/ca
        target: /ca
    entrypoint: ["pwsh","New-CFSSL_Certificate.ps1"]
    healthcheck:
      test: ["CMD","pwsh","Test-Path","/certs/cert.crt"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 10s
  registry:
    hostname: registry_app
    build: 
      context: src/registry
      dockerfile: Dockerfile 
      args: 
        - "basicAuthUsername=${DOCKER_REGISTRY_AUTHUSER}"
        - "basicAuthPassword=${DOCKER_REGISTRY_AUTHPASSWORD}"
        - "apiPort=5000"
        - "metricsPort=5001"
    env_file: env.conf   
    depends_on:
      - certgetter
    ports:
      - "5000:5000"
      - "5001:5001"
    volumes:
      - registry_data:/var/lib/registry
      - registry_certs:/certs
      - registry_auth:/auth    
    labels:
      # Adding this label means this container should be stopped while it's being backed up:
      - "docker-volume-backup.stop-during-backup=true"
   # This is a cool image to help take backups of volumes. You can take a manual backup of the running volume by executing:
   # docker-compose exec backup ./backup.sh
   # See https://github.com/futurice/docker-volume-backup for more info
  registry_backup:
    depends_on:
      - registry
    image: futurice/docker-volume-backup
    restart: 'unless-stopped'
    environment:
      BACKUP_CRON_EXPRESSION: "0 20 * * *"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Allow use of the "stop-during-backup" feature
      - registry_data:/backup/registry_data:ro    # Mount the registry data volume (as read-only)
    
      - ./backups/registry:/archive                      # Mount a local folder as the backup archive
  registryui:
    hostname: registry
    depends_on:
      - registry
    build: 
      context: src/registryui
      dockerfile: Dockerfile 
    restart: 'unless-stopped'
    ports:
      - "8000:8000"
    links:
    - registry:registry
  grafana:
    build: src/grafana
    ports:
      - '3000:3000'
    depends_on:
      - registry
    restart: 'unless-stopped'
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_plugins:/var/lib/grafana/plugins
      - grafana_provisiong:/etc/grafana/provisioning
      - grafana_home:/usr/share/grafana
      - grafana_logs:/var/log/grafana
    environment: 
      - GF_SECURITY_ADMIN_PASSWORD:"admin"
  prometheus:
    depends_on: 
      - registry
    ports:
      - '9090:9090'
    build: src/prometheus/
    restart: 'unless-stopped'
volumes:
  registry_data:
  registry_certs:
  registry_requested_certs:
  registry_auth:
  grafana_data:
  grafana_plugins:
  grafana_provisiong:
  grafana_home:
  grafana_logs: